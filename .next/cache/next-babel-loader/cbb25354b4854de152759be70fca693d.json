{"ast":null,"code":"var _jsxFileName = \"/Users/p0a00a6/Documents/test/cvid/components/CountrySelector.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport Autocomplete from \"@material-ui/core/Autocomplete\";\nimport { useStats } from \"../hooks/useStats\";\nexport default function CountrySelector(props) {\n  const countries = useStats(\"https://covid19.mathdro.id/api/countries\");\n  if (!countries) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6\n    },\n    __self: this\n  }, \"Loading countries...\");\n  return __jsx(\"section\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  }, __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  }, \"Countries\"), __jsx(\"select\", {\n    onChange: e => props.setSelectedCountry(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }, Object.entries(countries.countries).map(([country, code], index) => __jsx(\"option\", {\n    key: `code_${index}`,\n    value: code,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, country))), __jsx(Autocomplete, {\n    id: \"combo-box-demo\",\n    options: top100Films,\n    getOptionLabel: option => option.title,\n    style: {\n      width: 300\n    },\n    renderInput: params => __jsx(TextField, _extends({}, params, {\n      label: \"Combo box\",\n      variant: \"outlined\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }));\n}","map":{"version":3,"sources":["/Users/p0a00a6/Documents/test/cvid/components/CountrySelector.js"],"names":["Autocomplete","useStats","CountrySelector","props","countries","e","setSelectedCountry","target","value","Object","entries","map","country","code","index","top100Films","option","title","width","params"],"mappings":";;;;;;AAAA,OAAOA,YAAP,MAAyB,gCAAzB;AACA,SAASC,QAAT,QAAyB,mBAAzB;AAEA,eAAe,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAC7C,QAAMC,SAAS,GAAGH,QAAQ,CAAC,0CAAD,CAA1B;AACA,MAAI,CAACG,SAAL,EAAgB,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAP;AAEhB,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,EAEE;AAAQ,IAAA,QAAQ,EAAEC,CAAC,IAAIF,KAAK,CAACG,kBAAN,CAAyBD,CAAC,CAACE,MAAF,CAASC,KAAlC,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGC,MAAM,CAACC,OAAP,CAAeN,SAAS,CAACA,SAAzB,EAAoCO,GAApC,CAAwC,CAAC,CAACC,OAAD,EAAUC,IAAV,CAAD,EAAkBC,KAAlB,KACvC;AAAQ,IAAA,GAAG,EAAG,QAAOA,KAAM,EAA3B;AAA8B,IAAA,KAAK,EAAED,IAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,OADH,CADD,CADH,CAFF,EAUE,MAAC,YAAD;AACE,IAAA,EAAE,EAAC,gBADL;AAEE,IAAA,OAAO,EAAEG,WAFX;AAGE,IAAA,cAAc,EAAEC,MAAM,IAAIA,MAAM,CAACC,KAHnC;AAIE,IAAA,KAAK,EAAE;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAJT;AAKE,IAAA,WAAW,EAAEC,MAAM,IACjB,MAAC,SAAD,eAAeA,MAAf;AAAuB,MAAA,KAAK,EAAC,WAA7B;AAAyC,MAAA,OAAO,EAAC,UAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OANJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVF,CADF;AAuBD","sourcesContent":["import Autocomplete from \"@material-ui/core/Autocomplete\";\nimport { useStats } from \"../hooks/useStats\";\n\nexport default function CountrySelector(props) {\n  const countries = useStats(\"https://covid19.mathdro.id/api/countries\");\n  if (!countries) return <p>Loading countries...</p>;\n\n  return (\n    <section>\n      <p>Countries</p>\n      <select onChange={e => props.setSelectedCountry(e.target.value)}>\n        {Object.entries(countries.countries).map(([country, code], index) => (\n          <option key={`code_${index}`} value={code}>\n            {country}\n          </option>\n        ))}\n      </select>\n\n      <Autocomplete\n        id=\"combo-box-demo\"\n        options={top100Films}\n        getOptionLabel={option => option.title}\n        style={{ width: 300 }}\n        renderInput={params => (\n          <TextField {...params} label=\"Combo box\" variant=\"outlined\" />\n        )}\n      />\n      {/* <Stats uri={`countries/${code}`} /> */}\n    </section>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}